class Lucky extends Sequence{
  int p = 0;
  String author(){
    String str1 = "//LUCKY-NUMBERS//  No one known";
    return str1;
  }
  
  String description(){
    String str1 = "//LUCKY-NUMBERS//  In number theory, a lucky number is a natural number in a set which is generated by a certain /sieve/. This sieve is similar to the Sieve of Eratosthenes that generates the primes, but it eliminates numbers based on their position in the remaining set, instead of their value (or position in the initial set of natural numbers). When this procedure has been carried out completely, the survivors are the lucky numbers.";
    return str1;
  }
  int[] crea_arreglo (int n){ 
  int arreglo_impar[]; 
  if (n%2 == 0){ 
     arreglo_impar = new int[n/2]; 
  }else{ 
    arreglo_impar = new int[(n+1)/2]; 
  } 
  return arreglo_impar; 
} 

int tamano_arreglo (int n){ 
  int f; 
  if (n%2 == 0){ 
     f = n/2; 
  }else{ 
    f = (n+1)/2; 
  } 
  return f; 
} 

int[] crea_arreglo_impares (int n){ 
  int[] a = crea_arreglo (n); 
  int i = 0; 
  for (int m=1;m<=n;m++){ 
    if (m%2 == 1){ 
      a[i] = m; 
      i+= 1; 
    } 
  } 
  return a; 
} 

int[] ceros_al_final(int[] a,int n){ 
  int[] b= new int [n]; 
  for (int s=0;s<=n-1;s++){ 
    b[s]=0; 
  } 
  int i=0; 
  int k=0; 
  while (i<=n-1){ 
    if (a[i]!= 0){ 
      b[k]=a[i]; 
        k++; 
    } 
    i++; 
  } 
  return b; 
} 

int[] borra_numeros (int[] a, int e,int k){ 
  for (int j=k-1;j<=e-1;j+=k){ 
       a[j] = 0; 
    } 
    a  = ceros_al_final (a,e); 
    return a; 
} 

int[] Lucky_numbers (int n){ 
  int[] a = crea_arreglo_impares (n);
  int e = tamano_arreglo(n); 
  int p = 1; 
  int h = a[p]; 
  while(h<=e){ 
    a  = borra_numeros (a,e,h); 
    p++; 
    h = a[p]; 
  } 
  return a; 
} 

boolean Verificar_numero (int n){ 
   boolean b = false;
  if(n==0||n==5||n==6){
    b=false;
  }else{
    if(n==1){
      b = true;
    }else{
      if(n==2){
        b=false;
      }else{
        int e = tamano_arreglo(n); 
        int[] a = Lucky_numbers(n); 
        for(int i=0;i<=e-1;i++){ 
          if (a[i]==n){ 
          b = true; 
          } 
        } 
      }
    }  
   }
  return b; 
};

 
int[] arreglo_final (int n){
  int[] a = Lucky_numbers (n*100); 
  int[] j = new int [n]; 
  for (int i=0;i<=n-1;i++){ 
    j[i]=a[i]; 
   } 
   return j; 
}  

int compute (int n){
  int [] a = arreglo_final (n);
  return a[n-1];
};  

void draw(){
};

void display (int n){
  background(255);
  int q = n;
  double u = sqrt(q);
  int x = (int)u+1;
  size(700,700);
  int w = width/x;
  int h = height/x;
  int c = 1;
  for (int i=0;i<x;i++){
    for (int j=0;j<x;j++){
      if(c<=q){     
        if(Verificar_numero(c)==true){
          fill(0,100,0);
          rect(j*w,i*h,w,h);
        }else{
          fill(100000);
          rect(j*w,i*h,w,h);
        }
        c++;
      }
    }
  }
}